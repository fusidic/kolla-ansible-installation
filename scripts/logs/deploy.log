Deploying Playbooks : ansible-playbook -i ../multinode -e @/etc/kolla/globals.yml -e @/etc/kolla/passwords.yml -e CONFIG_DIR=/etc/kolla  -e kolla_action=deploy /usr/local/share/kolla-ansible/ansible/site.yml 
[DEPRECATION WARNING]: The TRANSFORM_INVALID_GROUP_CHARS settings is set to 
allow bad characters in group names by default, this will change, but still be 
user configurable on deprecation. This feature will be removed in version 2.10.
 Deprecation warnings can be disabled by setting deprecation_warnings=False in 
ansible.cfg.
[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details
[WARNING]: Could not match supplied host pattern, ignoring: enable_nova_True

PLAY [Gather facts for all hosts] **********************************************

TASK [Gathering Facts] *********************************************************
ok: [server1]
ok: [server2]
ok: [server3]

TASK [Group hosts to determine when using --limit] *****************************
ok: [server1]
ok: [server3]
ok: [server2]
[WARNING]: Could not match supplied host pattern, ignoring:
all_using_limit_True

PLAY [Gather facts for all hosts (if using --limit)] ***************************
skipping: no hosts matched

PLAY [Group hosts based on configuration] **************************************

TASK [Group hosts based on Kolla action] ***************************************
ok: [server1]
ok: [server3]
ok: [server2]

TASK [Group hosts based on enabled services] ***********************************
ok: [server1] => (item=enable_aodh_False)
ok: [server1] => (item=enable_barbican_False)
ok: [server1] => (item=enable_blazar_False)
ok: [server1] => (item=enable_ceilometer_False)
ok: [server1] => (item=enable_chrony_True)
ok: [server1] => (item=enable_cinder_True)
ok: [server1] => (item=enable_cloudkitty_False)
ok: [server1] => (item=enable_collectd_False)
ok: [server3] => (item=enable_aodh_False)
ok: [server1] => (item=enable_congress_False)
ok: [server3] => (item=enable_barbican_False)
ok: [server1] => (item=enable_cyborg_False)
ok: [server3] => (item=enable_blazar_False)
ok: [server1] => (item=enable_designate_False)
ok: [server3] => (item=enable_ceilometer_False)
ok: [server1] => (item=enable_elasticsearch_False)
ok: [server2] => (item=enable_aodh_False)
ok: [server3] => (item=enable_chrony_True)
ok: [server1] => (item=enable_etcd_False)
ok: [server2] => (item=enable_barbican_False)
ok: [server3] => (item=enable_cinder_True)
ok: [server1] => (item=enable_freezer_False)
ok: [server2] => (item=enable_blazar_False)
ok: [server3] => (item=enable_cloudkitty_False)
ok: [server1] => (item=enable_glance_True)
ok: [server2] => (item=enable_ceilometer_False)
ok: [server3] => (item=enable_collectd_False)
ok: [server1] => (item=enable_gnocchi_False)
ok: [server2] => (item=enable_chrony_True)
ok: [server3] => (item=enable_congress_False)
ok: [server1] => (item=enable_grafana_False)
ok: [server2] => (item=enable_cinder_True)
ok: [server3] => (item=enable_cyborg_False)
ok: [server1] => (item=enable_haproxy_False)
ok: [server2] => (item=enable_cloudkitty_False)
ok: [server3] => (item=enable_designate_False)
ok: [server1] => (item=enable_heat_True)
ok: [server2] => (item=enable_collectd_False)
ok: [server3] => (item=enable_elasticsearch_False)
ok: [server1] => (item=enable_horizon_True)
ok: [server2] => (item=enable_congress_False)
ok: [server3] => (item=enable_etcd_False)
ok: [server1] => (item=enable_hyperv_False)
ok: [server2] => (item=enable_cyborg_False)
ok: [server3] => (item=enable_freezer_False)
ok: [server1] => (item=enable_influxdb_False)
ok: [server2] => (item=enable_designate_False)
ok: [server3] => (item=enable_glance_True)
ok: [server1] => (item=enable_ironic_False)
ok: [server2] => (item=enable_elasticsearch_False)
ok: [server3] => (item=enable_gnocchi_False)
ok: [server1] => (item=enable_iscsid_True)
ok: [server3] => (item=enable_grafana_False)
ok: [server2] => (item=enable_etcd_False)
ok: [server1] => (item=enable_kafka_False)
ok: [server2] => (item=enable_freezer_False)
ok: [server3] => (item=enable_haproxy_False)
ok: [server1] => (item=enable_karbor_False)
ok: [server2] => (item=enable_glance_True)
ok: [server3] => (item=enable_heat_True)
ok: [server1] => (item=enable_keystone_True)
ok: [server2] => (item=enable_gnocchi_False)
ok: [server3] => (item=enable_horizon_True)
ok: [server1] => (item=enable_kibana_False)
ok: [server2] => (item=enable_grafana_False)
ok: [server3] => (item=enable_hyperv_False)
ok: [server1] => (item=enable_kuryr_False)
ok: [server2] => (item=enable_haproxy_False)
ok: [server3] => (item=enable_influxdb_False)
ok: [server1] => (item=enable_magnum_False)
ok: [server2] => (item=enable_heat_True)
ok: [server3] => (item=enable_ironic_False)
ok: [server1] => (item=enable_manila_False)
ok: [server2] => (item=enable_horizon_True)
ok: [server3] => (item=enable_iscsid_True)
ok: [server1] => (item=enable_mariadb_True)
ok: [server3] => (item=enable_kafka_False)
ok: [server2] => (item=enable_hyperv_False)
ok: [server1] => (item=enable_masakari_False)
ok: [server2] => (item=enable_influxdb_False)
ok: [server3] => (item=enable_karbor_False)
ok: [server1] => (item=enable_memcached_True)
ok: [server2] => (item=enable_ironic_False)
ok: [server3] => (item=enable_keystone_True)
ok: [server1] => (item=enable_mistral_False)
ok: [server2] => (item=enable_iscsid_True)
ok: [server3] => (item=enable_kibana_False)
ok: [server1] => (item=enable_monasca_False)
ok: [server2] => (item=enable_kafka_False)
ok: [server3] => (item=enable_kuryr_False)
ok: [server1] => (item=enable_mongodb_False)
ok: [server2] => (item=enable_karbor_False)
ok: [server3] => (item=enable_magnum_False)
ok: [server1] => (item=enable_multipathd_False)
ok: [server2] => (item=enable_keystone_True)
ok: [server3] => (item=enable_manila_False)
ok: [server1] => (item=enable_murano_False)
ok: [server2] => (item=enable_kibana_False)
ok: [server3] => (item=enable_mariadb_True)
ok: [server1] => (item=enable_neutron_True)
ok: [server2] => (item=enable_kuryr_False)
ok: [server3] => (item=enable_masakari_False)
ok: [server1] => (item=enable_nova_True)
ok: [server2] => (item=enable_magnum_False)
ok: [server3] => (item=enable_memcached_True)
ok: [server1] => (item=enable_octavia_False)
ok: [server2] => (item=enable_manila_False)
ok: [server3] => (item=enable_mistral_False)
ok: [server1] => (item=enable_openvswitch_True_enable_ovs_dpdk_False)
ok: [server2] => (item=enable_mariadb_True)
ok: [server3] => (item=enable_monasca_False)
ok: [server1] => (item=enable_outward_rabbitmq_False)
ok: [server2] => (item=enable_masakari_False)
ok: [server3] => (item=enable_mongodb_False)
ok: [server1] => (item=enable_ovn_False)
ok: [server2] => (item=enable_memcached_True)
ok: [server3] => (item=enable_multipathd_False)
ok: [server1] => (item=enable_panko_False)
ok: [server2] => (item=enable_mistral_False)
ok: [server3] => (item=enable_murano_False)
ok: [server1] => (item=enable_placement_True)
ok: [server2] => (item=enable_monasca_False)
ok: [server3] => (item=enable_neutron_True)
ok: [server1] => (item=enable_prometheus_False)
ok: [server2] => (item=enable_mongodb_False)
ok: [server3] => (item=enable_nova_True)
ok: [server1] => (item=enable_qdrouterd_False)
ok: [server2] => (item=enable_multipathd_False)
ok: [server3] => (item=enable_octavia_False)
ok: [server1] => (item=enable_qinling_False)
ok: [server2] => (item=enable_murano_False)
ok: [server3] => (item=enable_openvswitch_True_enable_ovs_dpdk_False)
ok: [server1] => (item=enable_rabbitmq_True)
ok: [server2] => (item=enable_neutron_True)
ok: [server3] => (item=enable_outward_rabbitmq_False)
ok: [server1] => (item=enable_rally_False)
ok: [server2] => (item=enable_nova_True)
ok: [server3] => (item=enable_ovn_False)
ok: [server1] => (item=enable_redis_False)
ok: [server2] => (item=enable_octavia_False)
ok: [server3] => (item=enable_panko_False)
ok: [server1] => (item=enable_sahara_False)
ok: [server2] => (item=enable_openvswitch_True_enable_ovs_dpdk_False)
ok: [server3] => (item=enable_placement_True)
ok: [server1] => (item=enable_searchlight_False)
ok: [server2] => (item=enable_outward_rabbitmq_False)
ok: [server3] => (item=enable_prometheus_False)
ok: [server1] => (item=enable_senlin_False)
ok: [server2] => (item=enable_ovn_False)
ok: [server3] => (item=enable_qdrouterd_False)
ok: [server1] => (item=enable_skydive_False)
ok: [server2] => (item=enable_panko_False)
ok: [server3] => (item=enable_qinling_False)
ok: [server1] => (item=enable_solum_False)
ok: [server2] => (item=enable_placement_True)
ok: [server3] => (item=enable_rabbitmq_True)
ok: [server1] => (item=enable_storm_False)
ok: [server2] => (item=enable_prometheus_False)
ok: [server3] => (item=enable_rally_False)
ok: [server1] => (item=enable_swift_False)
ok: [server2] => (item=enable_qdrouterd_False)
ok: [server3] => (item=enable_redis_False)
ok: [server1] => (item=enable_tacker_False)
ok: [server2] => (item=enable_qinling_False)
ok: [server3] => (item=enable_sahara_False)
ok: [server1] => (item=enable_telegraf_False)
ok: [server2] => (item=enable_rabbitmq_True)
ok: [server3] => (item=enable_searchlight_False)
ok: [server1] => (item=enable_tempest_False)
ok: [server2] => (item=enable_rally_False)
ok: [server3] => (item=enable_senlin_False)
ok: [server1] => (item=enable_trove_False)
ok: [server2] => (item=enable_redis_False)
ok: [server3] => (item=enable_skydive_False)
ok: [server1] => (item=enable_vitrage_False)
ok: [server2] => (item=enable_sahara_False)
ok: [server3] => (item=enable_solum_False)
ok: [server1] => (item=enable_vmtp_False)
ok: [server2] => (item=enable_searchlight_False)
ok: [server3] => (item=enable_storm_False)
ok: [server1] => (item=enable_watcher_False)
ok: [server2] => (item=enable_senlin_False)
ok: [server3] => (item=enable_swift_False)
ok: [server1] => (item=enable_zookeeper_False)
ok: [server2] => (item=enable_skydive_False)
ok: [server3] => (item=enable_tacker_False)
ok: [server1] => (item=enable_zun_False)
ok: [server2] => (item=enable_solum_False)
ok: [server3] => (item=enable_telegraf_False)
ok: [server2] => (item=enable_storm_False)
ok: [server3] => (item=enable_tempest_False)
ok: [server2] => (item=enable_swift_False)
ok: [server3] => (item=enable_trove_False)
ok: [server3] => (item=enable_vitrage_False)
ok: [server2] => (item=enable_tacker_False)
ok: [server2] => (item=enable_telegraf_False)
ok: [server3] => (item=enable_vmtp_False)
ok: [server2] => (item=enable_tempest_False)
ok: [server3] => (item=enable_watcher_False)
ok: [server2] => (item=enable_trove_False)
ok: [server3] => (item=enable_zookeeper_False)
ok: [server2] => (item=enable_vitrage_False)
ok: [server3] => (item=enable_zun_False)
ok: [server2] => (item=enable_vmtp_False)
ok: [server2] => (item=enable_watcher_False)
ok: [server2] => (item=enable_zookeeper_False)
ok: [server2] => (item=enable_zun_False)
[WARNING]: Could not match supplied host pattern, ignoring:
kolla_action_precheck

PLAY [Apply role prechecks] ****************************************************
skipping: no hosts matched

PLAY [Apply role chrony] *******************************************************

TASK [common : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/common/tasks/deploy.yml for server1, server2, server3

TASK [common : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/common/tasks/config.yml for server1, server2, server3

TASK [common : Ensuring config directories exist] ******************************
changed: [server1] => (item=kolla-toolbox)
changed: [server2] => (item=kolla-toolbox)
changed: [server3] => (item=kolla-toolbox)
changed: [server1] => (item=cron)
changed: [server2] => (item=cron)
changed: [server3] => (item=cron)
changed: [server1] => (item=cron/logrotate)
changed: [server2] => (item=cron/logrotate)
changed: [server3] => (item=cron/logrotate)

TASK [common : Ensuring fluentd config directories exist] **********************
changed: [server1] => (item=fluentd)
changed: [server2] => (item=fluentd)
changed: [server3] => (item=fluentd)
changed: [server1] => (item=fluentd/input)
changed: [server2] => (item=fluentd/input)
changed: [server3] => (item=fluentd/input)
changed: [server1] => (item=fluentd/output)
changed: [server2] => (item=fluentd/output)
changed: [server3] => (item=fluentd/output)
changed: [server1] => (item=fluentd/format)
changed: [server2] => (item=fluentd/format)
changed: [server3] => (item=fluentd/format)
changed: [server1] => (item=fluentd/filter)
changed: [server2] => (item=fluentd/filter)
changed: [server3] => (item=fluentd/filter)

TASK [common : Ensure fluentd image is present for label check] ****************
ok: [server3]
ok: [server2]
ok: [server1]

TASK [common : Fetch fluentd image labels] *************************************
ok: [server3]
ok: [server2]
ok: [server1]

TASK [common : Set fluentd facts] **********************************************
ok: [server1]
ok: [server2]
ok: [server3]

TASK [common : include_tasks] **************************************************
skipping: [server1]
skipping: [server2]
skipping: [server3]

TASK [common : Copying over config.json files for services] ********************
changed: [server3] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
changed: [server1] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
changed: [server3] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server1] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server3] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server1] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})

TASK [common : Find custom fluentd input config files] *************************
ok: [server1 -> localhost]

TASK [common : Copying over fluentd input config files] ************************
changed: [server1] => (item=00-global)
changed: [server3] => (item=00-global)
changed: [server2] => (item=00-global)
changed: [server3] => (item=01-syslog)
changed: [server1] => (item=01-syslog)
changed: [server2] => (item=01-syslog)
changed: [server3] => (item=02-mariadb)
changed: [server1] => (item=02-mariadb)
changed: [server2] => (item=02-mariadb)
changed: [server3] => (item=03-rabbitmq)
changed: [server1] => (item=03-rabbitmq)
changed: [server2] => (item=03-rabbitmq)
changed: [server3] => (item=04-openstack-wsgi)
changed: [server1] => (item=04-openstack-wsgi)
changed: [server2] => (item=04-openstack-wsgi)
changed: [server3] => (item=05-libvirt)
changed: [server1] => (item=05-libvirt)
changed: [server2] => (item=05-libvirt)
changed: [server3] => (item=06-zookeeper)
changed: [server1] => (item=06-zookeeper)
changed: [server2] => (item=06-zookeeper)
changed: [server3] => (item=07-kafka)
changed: [server1] => (item=07-kafka)
changed: [server2] => (item=07-kafka)
changed: [server3] => (item=09-monasca)
changed: [server1] => (item=09-monasca)
changed: [server2] => (item=09-monasca)

TASK [common : Copying over custom fluentd input config files] *****************

TASK [common : Determine whether logs should be forwarded directly to Elasticsearch] ***
ok: [server1]
ok: [server2]
ok: [server3]

TASK [common : Find custom fluentd output config files] ************************
ok: [server1 -> localhost]

TASK [common : Copying over fluentd output config files] ***********************
changed: [server1] => (item={'name': '00-local', 'enabled': True})
skipping: [server1] => (item={'name': '01-es', 'enabled': False}) 
changed: [server3] => (item={'name': '00-local', 'enabled': True})
skipping: [server1] => (item={'name': '02-monasca', 'enabled': False}) 
skipping: [server3] => (item={'name': '01-es', 'enabled': False}) 
skipping: [server3] => (item={'name': '02-monasca', 'enabled': False}) 
changed: [server2] => (item={'name': '00-local', 'enabled': True})
skipping: [server2] => (item={'name': '01-es', 'enabled': False}) 
skipping: [server2] => (item={'name': '02-monasca', 'enabled': False}) 

TASK [common : Removing stale output config files] *****************************
ok: [server1] => (item={'name': '02-monasca', 'disable': True})
ok: [server3] => (item={'name': '02-monasca', 'disable': True})
ok: [server2] => (item={'name': '02-monasca', 'disable': True})
ok: [server1] => (item={'name': '01-es', 'disable': True})
ok: [server3] => (item={'name': '01-es', 'disable': True})
ok: [server2] => (item={'name': '01-es', 'disable': True})

TASK [common : Copying over custom fluentd output config files] ****************

TASK [common : Find custom fluentd format config files] ************************
ok: [server1 -> localhost]

TASK [common : Copying over fluentd format config files] ***********************
changed: [server1] => (item=apache_access)
changed: [server3] => (item=apache_access)
changed: [server2] => (item=apache_access)
changed: [server3] => (item=wsgi_access)
changed: [server1] => (item=wsgi_access)
changed: [server2] => (item=wsgi_access)

TASK [common : Copying over custom fluentd format config files] ****************

TASK [common : Find custom fluentd filter config files] ************************
ok: [server1 -> localhost]

TASK [common : Copying over fluentd filter config files] ***********************
changed: [server1] => (item={'src': '00-record_transformer', 'dest': '00-record_transformer'})
changed: [server3] => (item={'src': '00-record_transformer', 'dest': '00-record_transformer'})
changed: [server2] => (item={'src': '00-record_transformer', 'dest': '00-record_transformer'})
changed: [server3] => (item={'src': '01-rewrite-0.14', 'dest': '01-rewrite'})
changed: [server1] => (item={'src': '01-rewrite-0.14', 'dest': '01-rewrite'})
changed: [server2] => (item={'src': '01-rewrite-0.14', 'dest': '01-rewrite'})
changed: [server3] => (item={'src': '02-parser', 'dest': '02-parser'})
changed: [server1] => (item={'src': '02-parser', 'dest': '02-parser'})
changed: [server2] => (item={'src': '02-parser', 'dest': '02-parser'})

TASK [common : Copying over custom fluentd filter config files] ****************

TASK [common : Copying over td-agent.conf] *************************************
changed: [server1] => (item=fluentd)
changed: [server3] => (item=fluentd)
changed: [server2] => (item=fluentd)

TASK [common : Copying over cron logrotate config files] ***********************
changed: [server1] => (item={'name': 'ansible', 'enabled': 'yes'})
skipping: [server1] => (item={'name': 'aodh', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'barbican', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'blazar', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'ceilometer', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'ansible', 'enabled': 'yes'})
skipping: [server2] => (item={'name': 'aodh', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'barbican', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'ansible', 'enabled': 'yes'})
skipping: [server2] => (item={'name': 'blazar', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'ceilometer', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'aodh', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'barbican', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'blazar', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'ceilometer', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'chrony', 'enabled': 'yes'})
changed: [server3] => (item={'name': 'chrony', 'enabled': 'yes'})
changed: [server2] => (item={'name': 'chrony', 'enabled': 'yes'})
changed: [server1] => (item={'name': 'cinder', 'enabled': 'yes'})
skipping: [server1] => (item={'name': 'cloudkitty', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'cinder', 'enabled': 'yes'})
skipping: [server1] => (item={'name': 'collectd', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'cloudkitty', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'congress', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'collectd', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'cyborg', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'congress', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'designate', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'cyborg', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'elasticsearch', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'designate', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'etcd', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'cinder', 'enabled': 'yes'})
skipping: [server3] => (item={'name': 'elasticsearch', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'freezer', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'cloudkitty', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'etcd', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'freezer', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'collectd', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'congress', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'cyborg', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'designate', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'elasticsearch', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'etcd', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'freezer', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'glance', 'enabled': True})
changed: [server3] => (item={'name': 'glance', 'enabled': True})
changed: [server2] => (item={'name': 'glance', 'enabled': True})
changed: [server3] => (item={'name': 'glance-tls-proxy', 'enabled': True})
changed: [server1] => (item={'name': 'glance-tls-proxy', 'enabled': True})
changed: [server2] => (item={'name': 'glance-tls-proxy', 'enabled': True})
changed: [server3] => (item={'name': 'global', 'enabled': 'yes'})
skipping: [server3] => (item={'name': 'gnocchi', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'grafana', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'haproxy', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'global', 'enabled': 'yes'})
skipping: [server1] => (item={'name': 'gnocchi', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'grafana', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'haproxy', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'global', 'enabled': 'yes'})
skipping: [server2] => (item={'name': 'gnocchi', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'grafana', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'haproxy', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'heat', 'enabled': True})
changed: [server1] => (item={'name': 'heat', 'enabled': True})
changed: [server2] => (item={'name': 'heat', 'enabled': True})
changed: [server3] => (item={'name': 'horizon', 'enabled': True})
skipping: [server3] => (item={'name': 'influxdb', 'enabled': False}) 
skipping: [server3] => (item={'name': 'ironic', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'ironic-inspector', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'horizon', 'enabled': True})
skipping: [server1] => (item={'name': 'influxdb', 'enabled': False}) 
skipping: [server1] => (item={'name': 'ironic', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'ironic-inspector', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'horizon', 'enabled': True})
skipping: [server2] => (item={'name': 'influxdb', 'enabled': False}) 
skipping: [server2] => (item={'name': 'ironic', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'ironic-inspector', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'iscsid', 'enabled': True})
skipping: [server3] => (item={'name': 'kafka', 'enabled': False}) 
skipping: [server3] => (item={'name': 'karbor', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'keepalived', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'iscsid', 'enabled': True})
skipping: [server1] => (item={'name': 'kafka', 'enabled': False}) 
skipping: [server1] => (item={'name': 'karbor', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'keepalived', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'iscsid', 'enabled': True})
skipping: [server2] => (item={'name': 'kafka', 'enabled': False}) 
skipping: [server2] => (item={'name': 'karbor', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'keepalived', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'keystone', 'enabled': True})
skipping: [server3] => (item={'name': 'kibana', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'kuryr', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'magnum', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'manila', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'keystone', 'enabled': True})
skipping: [server1] => (item={'name': 'kibana', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'kuryr', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'magnum', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'manila', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'keystone', 'enabled': True})
skipping: [server2] => (item={'name': 'kibana', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'kuryr', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'magnum', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'manila', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'mariadb', 'enabled': 'yes'})
skipping: [server3] => (item={'name': 'masakari', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'mistral', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'monasca', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'mongodb', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'murano', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'mariadb', 'enabled': 'yes'})
skipping: [server1] => (item={'name': 'masakari', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'mistral', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'monasca', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'mongodb', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'murano', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'mariadb', 'enabled': 'yes'})
skipping: [server2] => (item={'name': 'masakari', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'mistral', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'monasca', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'mongodb', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'murano', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'neutron', 'enabled': True})
changed: [server1] => (item={'name': 'neutron', 'enabled': True})
changed: [server2] => (item={'name': 'neutron', 'enabled': True})
changed: [server3] => (item={'name': 'nova', 'enabled': True})
skipping: [server3] => (item={'name': 'octavia', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'outward-rabbitmq', 'enabled': False}) 
skipping: [server3] => (item={'name': 'panko', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'qinling', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'nova', 'enabled': True})
skipping: [server1] => (item={'name': 'octavia', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'outward-rabbitmq', 'enabled': False}) 
skipping: [server1] => (item={'name': 'panko', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'qinling', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'nova', 'enabled': True})
skipping: [server2] => (item={'name': 'octavia', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'outward-rabbitmq', 'enabled': False}) 
skipping: [server2] => (item={'name': 'panko', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'qinling', 'enabled': 'no'}) 
changed: [server3] => (item={'name': 'rabbitmq', 'enabled': 'yes'})
skipping: [server3] => (item={'name': 'rally', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'sahara', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'searchlight', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'senlin', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'skydive', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'solum', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'storm', 'enabled': False}) 
skipping: [server3] => (item={'name': 'swift', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'tacker', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'tempest', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'trove', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'vitrage', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'watcher', 'enabled': 'no'}) 
skipping: [server3] => (item={'name': 'zookeeper', 'enabled': False}) 
skipping: [server3] => (item={'name': 'zun', 'enabled': 'no'}) 
changed: [server1] => (item={'name': 'rabbitmq', 'enabled': 'yes'})
skipping: [server1] => (item={'name': 'rally', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'sahara', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'searchlight', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'senlin', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'skydive', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'solum', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'storm', 'enabled': False}) 
skipping: [server1] => (item={'name': 'swift', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'tacker', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'tempest', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'trove', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'vitrage', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'watcher', 'enabled': 'no'}) 
skipping: [server1] => (item={'name': 'zookeeper', 'enabled': False}) 
skipping: [server1] => (item={'name': 'zun', 'enabled': 'no'}) 
changed: [server2] => (item={'name': 'rabbitmq', 'enabled': 'yes'})
skipping: [server2] => (item={'name': 'rally', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'sahara', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'searchlight', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'senlin', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'skydive', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'solum', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'storm', 'enabled': False}) 
skipping: [server2] => (item={'name': 'swift', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'tacker', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'tempest', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'trove', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'vitrage', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'watcher', 'enabled': 'no'}) 
skipping: [server2] => (item={'name': 'zookeeper', 'enabled': False}) 
skipping: [server2] => (item={'name': 'zun', 'enabled': 'no'}) 

TASK [common : Ensure RabbitMQ Erlang cookie exists] ***************************
changed: [server1]
changed: [server3]
changed: [server2]

TASK [common : Ensuring config directories have correct owner and permission] ***
ok: [server1] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
skipping: [server1] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}}) 
ok: [server3] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
ok: [server2] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
skipping: [server3] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}}) 
ok: [server1] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
ok: [server3] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
ok: [server2] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})

TASK [common : Copy rabbitmq-env.conf to kolla toolbox] ************************
skipping: [server1]
skipping: [server2]
skipping: [server3]

TASK [common : Copy rabbitmq erl_intr to kolla toolbox] ************************
skipping: [server1]
skipping: [server2]
skipping: [server3]

TASK [common : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/common/tasks/check-containers.yml for server1, server2, server3

TASK [common : Check common containers] ****************************************
changed: [server1] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
changed: [server3] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'fluentd', 'value': {'container_name': 'fluentd', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-fluentd:ussuri', 'environment': {'KOLLA_CONFIG_STRATEGY': 'COPY_ALWAYS'}, 'volumes': ['/etc/kolla/fluentd/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', 'fluentd_data:/var/lib/fluentd/data/'], 'dimensions': {}}})
changed: [server1] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server3] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'kolla-toolbox', 'value': {'container_name': 'kolla_toolbox', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-kolla-toolbox:ussuri', 'environment': {'ANSIBLE_NOCOLOR': '1', 'ANSIBLE_LIBRARY': '/usr/share/ansible'}, 'privileged': True, 'volumes': ['/etc/kolla/kolla-toolbox/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server3] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server1] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'cron', 'value': {'container_name': 'cron', 'group': 'all', 'enabled': True, 'image': 'kolla/ubuntu-source-cron:ussuri', 'environment': {'DUMMY_ENVIRONMENT': 'kolla_useless_env'}, 'volumes': ['/etc/kolla/cron/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/'], 'dimensions': {}}})

TASK [common : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/common/tasks/bootstrap.yml for server1, server2, server3

TASK [common : Creating log volume] ********************************************
changed: [server3]
changed: [server1]
changed: [server2]

TASK [common : Link kolla_logs volume to /var/log/kolla] ***********************
fatal: [server1]: FAILED! => {"changed": false, "gid": 0, "group": "root", "mode": "0755", "msg": "refusing to convert from directory to symlink for /var/log/kolla", "owner": "root", "path": "/var/log/kolla", "size": 4096, "state": "directory", "uid": 0}
changed: [server2]
changed: [server3]
[WARNING]: flush_handlers task does not support when conditional

RUNNING HANDLER [common : Restart fluentd container] ***************************
changed: [server3]
changed: [server2]

RUNNING HANDLER [common : Restart kolla-toolbox container] *********************
changed: [server3]
changed: [server2]

RUNNING HANDLER [common : Initializing toolbox container using normal user] ****
ok: [server3]
ok: [server2]

RUNNING HANDLER [common : Restart cron container] ******************************
changed: [server3]
changed: [server2]

TASK [common : Registering common role has run] ********************************
ok: [server2]
ok: [server3]

TASK [chrony : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/chrony/tasks/deploy.yml for server2, server3

TASK [chrony : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/chrony/tasks/config.yml for server2, server3

TASK [chrony : Ensuring config directories exist] ******************************
changed: [server3] => (item=chrony)
changed: [server2] => (item=chrony)

TASK [chrony : Copying over config.json files for services] ********************
changed: [server2] => (item=chrony)
changed: [server3] => (item=chrony)

TASK [chrony : Copying over chrony.conf] ***************************************
changed: [server3] => (item=/usr/local/share/kolla-ansible/ansible/roles/chrony/templates/chrony.conf.j2)
changed: [server2] => (item=/usr/local/share/kolla-ansible/ansible/roles/chrony/templates/chrony.conf.j2)

TASK [chrony : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/chrony/tasks/check-containers.yml for server2, server3

TASK [chrony : Check chrony container] *****************************************
changed: [server3] => (item={'key': 'chrony', 'value': {'container_name': 'chrony', 'group': 'chrony', 'image': 'kolla/ubuntu-source-chrony:ussuri', 'enabled': True, 'privileged': True, 'volumes': ['/etc/kolla/chrony/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'chrony', 'value': {'container_name': 'chrony', 'group': 'chrony', 'image': 'kolla/ubuntu-source-chrony:ussuri', 'enabled': True, 'privileged': True, 'volumes': ['/etc/kolla/chrony/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla'], 'dimensions': {}}})

RUNNING HANDLER [chrony : Restart chrony container] ****************************
changed: [server3]
changed: [server2]
[WARNING]: Could not match supplied host pattern, ignoring: enable_haproxy_True

PLAY [Apply role haproxy] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_collectd_True

PLAY [Apply role collectd] *****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_zookeeper_True

PLAY [Apply role zookeeper] ****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_elasticsearch_True

PLAY [Apply role elasticsearch] ************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_influxdb_True

PLAY [Apply role influxdb] *****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_telegraf_True

PLAY [Apply role telegraf] *****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_redis_True

PLAY [Apply role redis] ********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_kibana_True

PLAY [Apply role kibana] *******************************************************
skipping: no hosts matched

PLAY [Apply role mariadb] ******************************************************

PLAY [Apply role memcached] ****************************************************
[WARNING]: Could not match supplied host pattern, ignoring:
enable_prometheus_True

PLAY [Apply role prometheus] ***************************************************
skipping: no hosts matched

PLAY [Apply role iscsi] ********************************************************

TASK [common : include_tasks] **************************************************
skipping: [server2]
skipping: [server3]

TASK [common : Registering common role has run] ********************************
skipping: [server2]
skipping: [server3]

TASK [iscsi : include_tasks] ***************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/iscsi/tasks/deploy.yml for server2, server3

TASK [iscsi : include_tasks] ***************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/iscsi/tasks/config-host.yml for server2, server3

TASK [module-load : Check whether /etc/modules-load.d exists] ******************
ok: [server2]
ok: [server3]

TASK [module-load : Load modules] **********************************************
changed: [server2] => (item=configfs)
changed: [server3] => (item=configfs)

TASK [module-load : Persist modules via modules-load.d] ************************
ok: [server2] => (item=configfs)
ok: [server3] => (item=configfs)

TASK [module-load : Drop module persistence] ***********************************
skipping: [server2] => (item=configfs) 
skipping: [server3] => (item=configfs) 

TASK [module-load : Persist modules via /etc/modules] **************************
skipping: [server2] => (item=configfs) 
skipping: [server3] => (item=configfs) 

TASK [iscsi : include_tasks] ***************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/iscsi/tasks/config.yml for server2, server3

TASK [iscsi : Ensuring config directories exist] *******************************
changed: [server2] => (item={'key': 'iscsid', 'value': {'container_name': 'iscsid', 'group': 'iscsid', 'enabled': True, 'image': 'kolla/ubuntu-source-iscsid:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/iscsid/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})
changed: [server3] => (item={'key': 'iscsid', 'value': {'container_name': 'iscsid', 'group': 'iscsid', 'enabled': True, 'image': 'kolla/ubuntu-source-iscsid:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/iscsid/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'tgtd', 'value': {'container_name': 'tgtd', 'group': 'tgtd', 'enabled': True, 'image': 'kolla/ubuntu-source-tgtd:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/tgtd/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}}) 
changed: [server3] => (item={'key': 'tgtd', 'value': {'container_name': 'tgtd', 'group': 'tgtd', 'enabled': True, 'image': 'kolla/ubuntu-source-tgtd:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/tgtd/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})

TASK [iscsi : Copying over config.json files for services] *********************
changed: [server3] => (item={'key': 'iscsid', 'value': {'container_name': 'iscsid', 'group': 'iscsid', 'enabled': True, 'image': 'kolla/ubuntu-source-iscsid:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/iscsid/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})
changed: [server2] => (item={'key': 'iscsid', 'value': {'container_name': 'iscsid', 'group': 'iscsid', 'enabled': True, 'image': 'kolla/ubuntu-source-iscsid:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/iscsid/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'tgtd', 'value': {'container_name': 'tgtd', 'group': 'tgtd', 'enabled': True, 'image': 'kolla/ubuntu-source-tgtd:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/tgtd/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}}) 
changed: [server3] => (item={'key': 'tgtd', 'value': {'container_name': 'tgtd', 'group': 'tgtd', 'enabled': True, 'image': 'kolla/ubuntu-source-tgtd:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/tgtd/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})

TASK [iscsi : include_tasks] ***************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/iscsi/tasks/check-containers.yml for server2, server3

TASK [iscsi : Check iscsi containers] ******************************************
changed: [server2] => (item={'key': 'iscsid', 'value': {'container_name': 'iscsid', 'group': 'iscsid', 'enabled': True, 'image': 'kolla/ubuntu-source-iscsid:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/iscsid/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})
changed: [server3] => (item={'key': 'iscsid', 'value': {'container_name': 'iscsid', 'group': 'iscsid', 'enabled': True, 'image': 'kolla/ubuntu-source-iscsid:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/iscsid/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'tgtd', 'value': {'container_name': 'tgtd', 'group': 'tgtd', 'enabled': True, 'image': 'kolla/ubuntu-source-tgtd:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/tgtd/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}}) 
changed: [server3] => (item={'key': 'tgtd', 'value': {'container_name': 'tgtd', 'group': 'tgtd', 'enabled': True, 'image': 'kolla/ubuntu-source-tgtd:ussuri', 'ipc_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/tgtd/:/var/lib/kolla/config_files/:ro', 'kolla_logs:/var/log/kolla/', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/run/:/run/:shared', '/sys/fs/cgroup:/sys/fs/cgroup:ro', '/lib/modules:/lib/modules:ro', '/sys/kernel/config:/configfs', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi'], 'dimensions': {}}})

RUNNING HANDLER [iscsi : Restart iscsid container] *****************************
changed: [server3]
changed: [server2]

RUNNING HANDLER [iscsi : Restart tgtd container] *******************************
changed: [server3]
[WARNING]: Could not match supplied host pattern, ignoring:
enable_multipathd_True

PLAY [Apply role multipathd] ***************************************************
skipping: no hosts matched

PLAY [Apply role rabbitmq] *****************************************************
[WARNING]: Could not match supplied host pattern, ignoring:
enable_outward_rabbitmq_True

PLAY [Apply role rabbitmq (outward)] *******************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_qdrouterd_True

PLAY [Apply role qdrouterd] ****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_etcd_True

PLAY [Apply role etcd] *********************************************************
skipping: no hosts matched

PLAY [Apply role keystone] *****************************************************
[WARNING]: Could not match supplied host pattern, ignoring: enable_kafka_True

PLAY [Apply role kafka] ********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_storm_True

PLAY [Apply role storm] ********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_karbor_True

PLAY [Apply role karbor] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_swift_True

PLAY [Apply role swift] ********************************************************
skipping: no hosts matched

PLAY [Apply role glance] *******************************************************
[WARNING]: Could not match supplied host pattern, ignoring: enable_ironic_True

PLAY [Apply role ironic] *******************************************************
skipping: no hosts matched

PLAY [Apply role cinder] *******************************************************

TASK [common : include_tasks] **************************************************
skipping: [server3]

TASK [common : Registering common role has run] ********************************
skipping: [server3]

TASK [cinder : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/cinder/tasks/deploy.yml for server3

TASK [cinder : include_tasks] **************************************************
skipping: [server3]

TASK [cinder : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/cinder/tasks/config.yml for server3

TASK [cinder : Ensuring config directories exist] ******************************
skipping: [server3] => (item={'key': 'cinder-api', 'value': {'container_name': 'cinder_api', 'group': 'cinder-api', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-api:ussuri', 'volumes': ['/etc/kolla/cinder-api/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}, 'haproxy': {'cinder_api': {'enabled': 'yes', 'mode': 'http', 'external': False, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}, 'cinder_api_external': {'enabled': 'yes', 'mode': 'http', 'external': True, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}}}}) 
skipping: [server3] => (item={'key': 'cinder-scheduler', 'value': {'container_name': 'cinder_scheduler', 'group': 'cinder-scheduler', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-scheduler:ussuri', 'volumes': ['/etc/kolla/cinder-scheduler/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server3] => (item={'key': 'cinder-volume', 'value': {'container_name': 'cinder_volume', 'group': 'cinder-volume', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-volume:ussuri', 'privileged': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/cinder-volume/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', '', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})
changed: [server3] => (item={'key': 'cinder-backup', 'value': {'container_name': 'cinder_backup', 'group': 'cinder-backup', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-backup:ussuri', 'privileged': True, 'volumes': ['/etc/kolla/cinder-backup/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})

TASK [cinder : include_tasks] **************************************************
skipping: [server3]

TASK [cinder : Check if policies shall be overwritten] *************************

TASK [cinder : Set cinder policy file] *****************************************
skipping: [server3]

TASK [cinder : include_tasks] **************************************************
skipping: [server3]

TASK [cinder : Copying over config.json files for services] ********************
skipping: [server3] => (item={'key': 'cinder-api', 'value': {'container_name': 'cinder_api', 'group': 'cinder-api', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-api:ussuri', 'volumes': ['/etc/kolla/cinder-api/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}, 'haproxy': {'cinder_api': {'enabled': 'yes', 'mode': 'http', 'external': False, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}, 'cinder_api_external': {'enabled': 'yes', 'mode': 'http', 'external': True, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}}}}) 
skipping: [server3] => (item={'key': 'cinder-scheduler', 'value': {'container_name': 'cinder_scheduler', 'group': 'cinder-scheduler', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-scheduler:ussuri', 'volumes': ['/etc/kolla/cinder-scheduler/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server3] => (item={'key': 'cinder-volume', 'value': {'container_name': 'cinder_volume', 'group': 'cinder-volume', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-volume:ussuri', 'privileged': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/cinder-volume/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', '', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})
changed: [server3] => (item={'key': 'cinder-backup', 'value': {'container_name': 'cinder_backup', 'group': 'cinder-backup', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-backup:ussuri', 'privileged': True, 'volumes': ['/etc/kolla/cinder-backup/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})

TASK [cinder : Copying over cinder-wsgi.conf] **********************************
skipping: [server3] => (item=/usr/local/share/kolla-ansible/ansible/roles/cinder/templates/cinder-wsgi.conf.j2) 

TASK [cinder : Copying over cinder.conf] ***************************************
skipping: [server3] => (item={'key': 'cinder-api', 'value': {'container_name': 'cinder_api', 'group': 'cinder-api', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-api:ussuri', 'volumes': ['/etc/kolla/cinder-api/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}, 'haproxy': {'cinder_api': {'enabled': 'yes', 'mode': 'http', 'external': False, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}, 'cinder_api_external': {'enabled': 'yes', 'mode': 'http', 'external': True, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}}}}) 
skipping: [server3] => (item={'key': 'cinder-scheduler', 'value': {'container_name': 'cinder_scheduler', 'group': 'cinder-scheduler', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-scheduler:ussuri', 'volumes': ['/etc/kolla/cinder-scheduler/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server3] => (item={'key': 'cinder-volume', 'value': {'container_name': 'cinder_volume', 'group': 'cinder-volume', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-volume:ussuri', 'privileged': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/cinder-volume/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', '', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})
changed: [server3] => (item={'key': 'cinder-backup', 'value': {'container_name': 'cinder_backup', 'group': 'cinder-backup', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-backup:ussuri', 'privileged': True, 'volumes': ['/etc/kolla/cinder-backup/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})

TASK [cinder : Copying over existing policy file] ******************************
skipping: [server3] => (item={'key': 'cinder-api', 'value': {'container_name': 'cinder_api', 'group': 'cinder-api', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-api:ussuri', 'volumes': ['/etc/kolla/cinder-api/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}, 'haproxy': {'cinder_api': {'enabled': 'yes', 'mode': 'http', 'external': False, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}, 'cinder_api_external': {'enabled': 'yes', 'mode': 'http', 'external': True, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}}}}) 
skipping: [server3] => (item={'key': 'cinder-scheduler', 'value': {'container_name': 'cinder_scheduler', 'group': 'cinder-scheduler', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-scheduler:ussuri', 'volumes': ['/etc/kolla/cinder-scheduler/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server3] => (item={'key': 'cinder-volume', 'value': {'container_name': 'cinder_volume', 'group': 'cinder-volume', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-volume:ussuri', 'privileged': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/cinder-volume/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', '', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server3] => (item={'key': 'cinder-backup', 'value': {'container_name': 'cinder_backup', 'group': 'cinder-backup', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-backup:ussuri', 'privileged': True, 'volumes': ['/etc/kolla/cinder-backup/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 

TASK [cinder : Copying over nfs_shares files for cinder_volume] ****************

TASK [cinder : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/cinder/tasks/check-containers.yml for server3

TASK [cinder : Check cinder containers] ****************************************
skipping: [server3] => (item={'key': 'cinder-api', 'value': {'container_name': 'cinder_api', 'group': 'cinder-api', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-api:ussuri', 'volumes': ['/etc/kolla/cinder-api/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}, 'haproxy': {'cinder_api': {'enabled': 'yes', 'mode': 'http', 'external': False, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}, 'cinder_api_external': {'enabled': 'yes', 'mode': 'http', 'external': True, 'port': '8776', 'listen_port': '8776', 'tls_backend': 'no'}}}}) 
skipping: [server3] => (item={'key': 'cinder-scheduler', 'value': {'container_name': 'cinder_scheduler', 'group': 'cinder-scheduler', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-scheduler:ussuri', 'volumes': ['/etc/kolla/cinder-scheduler/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server3] => (item={'key': 'cinder-volume', 'value': {'container_name': 'cinder_volume', 'group': 'cinder-volume', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-volume:ussuri', 'privileged': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/cinder-volume/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', '', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})
changed: [server3] => (item={'key': 'cinder-backup', 'value': {'container_name': 'cinder_backup', 'group': 'cinder-backup', 'enabled': True, 'image': 'kolla/ubuntu-source-cinder-backup:ussuri', 'privileged': True, 'volumes': ['/etc/kolla/cinder-backup/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/dev/:/dev/', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', 'cinder:/var/lib/cinder', 'iscsi_info:/etc/iscsi', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}})

TASK [cinder : include_tasks] **************************************************
skipping: [server3]

TASK [cinder : include_tasks] **************************************************
skipping: [server3]

RUNNING HANDLER [cinder : Restart cinder-volume container] *********************
changed: [server3]

RUNNING HANDLER [cinder : Restart cinder-backup container] *********************
changed: [server3]

TASK [cinder : include_tasks] **************************************************
included: /usr/local/share/kolla-ansible/ansible/roles/cinder/tasks/check.yml for server3

TASK [cinder : Cinder sanity check - create volume] ****************************
skipping: [server3]

TASK [cinder : Cinder sanity check - cleanup volume] ***************************
skipping: [server3]

PLAY [Apply role placement] ****************************************************

PLAY [Bootstrap nova API databases] ********************************************

PLAY [Bootstrap nova cell databases] *******************************************

PLAY [Apply role nova] *********************************************************

PLAY [Apply role nova-cell] ****************************************************

TASK [common : include_tasks] **************************************************
skipping: [server2]

TASK [common : Registering common role has run] ********************************
skipping: [server2]

TASK [nova-cell : include_tasks] ***********************************************
included: /usr/local/share/kolla-ansible/ansible/roles/nova-cell/tasks/deploy.yml for server2

TASK [nova-cell : include_tasks] ***********************************************
skipping: [server2]

TASK [nova-cell : include_tasks] ***********************************************
skipping: [server2]

TASK [nova-cell : include_tasks] ***********************************************
included: /usr/local/share/kolla-ansible/ansible/roles/nova-cell/tasks/config-host.yml for server2

TASK [nova-cell : Setting sysctl values] ***************************************
ok: [server2] => (item={'name': 'net.bridge.bridge-nf-call-iptables', 'value': 1})
ok: [server2] => (item={'name': 'net.bridge.bridge-nf-call-ip6tables', 'value': 1})
ok: [server2] => (item={'name': 'net.ipv4.conf.all.rp_filter', 'value': 0})
ok: [server2] => (item={'name': 'net.ipv4.conf.default.rp_filter', 'value': 0})

TASK [nova-cell : include_tasks] ***********************************************
included: /usr/local/share/kolla-ansible/ansible/roles/nova-cell/tasks/config.yml for server2

TASK [nova-cell : Ensuring config directories exist] ***************************
changed: [server2] => (item={'key': 'nova-libvirt', 'value': {'container_name': 'nova_libvirt', 'group': 'compute', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-libvirt:ussuri', 'pid_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/nova-libvirt/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', '/dev:/dev', '/sys/fs/cgroup:/sys/fs/cgroup', 'kolla_logs:/var/log/kolla/', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', 'nova_libvirt_qemu:/etc/libvirt/qemu', ''], 'dimensions': {}}})
changed: [server2] => (item={'key': 'nova-ssh', 'value': {'container_name': 'nova_ssh', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-ssh:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-ssh/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla', 'nova_compute:/var/lib/nova', '', ''], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'nova-novncproxy', 'value': {'container_name': 'nova_novncproxy', 'group': 'nova-novncproxy', 'image': 'kolla/ubuntu-source-nova-novncproxy:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-novncproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-spicehtml5proxy', 'value': {'container_name': 'nova_spicehtml5proxy', 'group': 'nova-spicehtml5proxy', 'image': 'kolla/ubuntu-source-nova-spicehtml5proxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-spicehtml5proxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-serialproxy', 'value': {'container_name': 'nova_serialproxy', 'group': 'nova-serialproxy', 'image': 'kolla/ubuntu-source-nova-serialproxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-serialproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-conductor', 'value': {'container_name': 'nova_conductor', 'group': 'nova-conductor', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-conductor:ussuri', 'volumes': ['/etc/kolla/nova-conductor/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server2] => (item={'key': 'nova-compute', 'value': {'container_name': 'nova_compute', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-compute:ussuri', 'environment': {'LIBGUESTFS_BACKEND': 'direct'}, 'privileged': True, 'enabled': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/nova-compute/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run:/run:shared', '/dev:/dev', 'kolla_logs:/var/log/kolla/', 'iscsi_info:/etc/iscsi', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', ''], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'nova-compute-ironic', 'value': {'container_name': 'nova_compute_ironic', 'group': 'nova-compute-ironic', 'image': 'kolla/ubuntu-source-nova-compute-ironic:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-compute-ironic/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 

TASK [nova-cell : include_tasks] ***********************************************
skipping: [server2]

TASK [nova-cell : include_tasks] ***********************************************
skipping: [server2]

TASK [nova-cell : Check if policies shall be overwritten] **********************

TASK [nova-cell : Set nova policy file] ****************************************
skipping: [server2]

TASK [nova-cell : Copying over config.json files for services] *****************
changed: [server2] => (item={'key': 'nova-libvirt', 'value': {'container_name': 'nova_libvirt', 'group': 'compute', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-libvirt:ussuri', 'pid_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/nova-libvirt/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', '/dev:/dev', '/sys/fs/cgroup:/sys/fs/cgroup', 'kolla_logs:/var/log/kolla/', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', 'nova_libvirt_qemu:/etc/libvirt/qemu', ''], 'dimensions': {}}})
changed: [server2] => (item={'key': 'nova-ssh', 'value': {'container_name': 'nova_ssh', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-ssh:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-ssh/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla', 'nova_compute:/var/lib/nova', '', ''], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'nova-novncproxy', 'value': {'container_name': 'nova_novncproxy', 'group': 'nova-novncproxy', 'image': 'kolla/ubuntu-source-nova-novncproxy:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-novncproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-spicehtml5proxy', 'value': {'container_name': 'nova_spicehtml5proxy', 'group': 'nova-spicehtml5proxy', 'image': 'kolla/ubuntu-source-nova-spicehtml5proxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-spicehtml5proxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-serialproxy', 'value': {'container_name': 'nova_serialproxy', 'group': 'nova-serialproxy', 'image': 'kolla/ubuntu-source-nova-serialproxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-serialproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-conductor', 'value': {'container_name': 'nova_conductor', 'group': 'nova-conductor', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-conductor:ussuri', 'volumes': ['/etc/kolla/nova-conductor/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server2] => (item={'key': 'nova-compute', 'value': {'container_name': 'nova_compute', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-compute:ussuri', 'environment': {'LIBGUESTFS_BACKEND': 'direct'}, 'privileged': True, 'enabled': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/nova-compute/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run:/run:shared', '/dev:/dev', 'kolla_logs:/var/log/kolla/', 'iscsi_info:/etc/iscsi', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', ''], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'nova-compute-ironic', 'value': {'container_name': 'nova_compute_ironic', 'group': 'nova-compute-ironic', 'image': 'kolla/ubuntu-source-nova-compute-ironic:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-compute-ironic/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 

TASK [nova-cell : Set XenAPI facts] ********************************************
skipping: [server2]

TASK [nova-cell : Copying over nova.conf] **************************************
skipping: [server2] => (item={'key': 'nova-libvirt', 'value': {'container_name': 'nova_libvirt', 'group': 'compute', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-libvirt:ussuri', 'pid_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/nova-libvirt/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', '/dev:/dev', '/sys/fs/cgroup:/sys/fs/cgroup', 'kolla_logs:/var/log/kolla/', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', 'nova_libvirt_qemu:/etc/libvirt/qemu', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-ssh', 'value': {'container_name': 'nova_ssh', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-ssh:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-ssh/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla', 'nova_compute:/var/lib/nova', '', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-novncproxy', 'value': {'container_name': 'nova_novncproxy', 'group': 'nova-novncproxy', 'image': 'kolla/ubuntu-source-nova-novncproxy:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-novncproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-spicehtml5proxy', 'value': {'container_name': 'nova_spicehtml5proxy', 'group': 'nova-spicehtml5proxy', 'image': 'kolla/ubuntu-source-nova-spicehtml5proxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-spicehtml5proxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-serialproxy', 'value': {'container_name': 'nova_serialproxy', 'group': 'nova-serialproxy', 'image': 'kolla/ubuntu-source-nova-serialproxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-serialproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-conductor', 'value': {'container_name': 'nova_conductor', 'group': 'nova-conductor', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-conductor:ussuri', 'volumes': ['/etc/kolla/nova-conductor/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server2] => (item={'key': 'nova-compute', 'value': {'container_name': 'nova_compute', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-compute:ussuri', 'environment': {'LIBGUESTFS_BACKEND': 'direct'}, 'privileged': True, 'enabled': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/nova-compute/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run:/run:shared', '/dev:/dev', 'kolla_logs:/var/log/kolla/', 'iscsi_info:/etc/iscsi', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', ''], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'nova-compute-ironic', 'value': {'container_name': 'nova_compute_ironic', 'group': 'nova-compute-ironic', 'image': 'kolla/ubuntu-source-nova-compute-ironic:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-compute-ironic/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 

TASK [nova-cell : Copying over libvirt configuration] **************************
changed: [server2] => (item={'src': 'qemu.conf.j2', 'dest': 'qemu.conf'})
changed: [server2] => (item={'src': 'libvirtd.conf.j2', 'dest': 'libvirtd.conf'})

TASK [nova-cell : Copying over libvirt TLS keys (nova-libvirt)] ****************
skipping: [server2] => (item=cacert.pem) 
skipping: [server2] => (item=servercert.pem) 
skipping: [server2] => (item=serverkey.pem) 
skipping: [server2] => (item=clientcert.pem) 
skipping: [server2] => (item=clientkey.pem) 

TASK [nova-cell : Copying over libvirt TLS keys (nova-compute)] ****************
skipping: [server2] => (item=cacert.pem) 
skipping: [server2] => (item=clientcert.pem) 
skipping: [server2] => (item=clientkey.pem) 

TASK [nova-cell : Copying files for nova-ssh] **********************************
changed: [server2] => (item={'src': 'sshd_config.j2', 'dest': 'sshd_config'})
changed: [server2] => (item={'src': 'id_rsa', 'dest': 'id_rsa'})
changed: [server2] => (item={'src': 'id_rsa.pub', 'dest': 'id_rsa.pub'})
changed: [server2] => (item={'src': 'ssh_config.j2', 'dest': 'ssh_config'})

TASK [nova-cell : Copying VMware vCenter CA file] ******************************
skipping: [server2]

TASK [nova-cell : Copying 'release' file for nova_compute] *********************

TASK [nova-cell : Copying over existing policy file] ***************************
skipping: [server2] => (item={'key': 'nova-libvirt', 'value': {'container_name': 'nova_libvirt', 'group': 'compute', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-libvirt:ussuri', 'pid_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/nova-libvirt/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', '/dev:/dev', '/sys/fs/cgroup:/sys/fs/cgroup', 'kolla_logs:/var/log/kolla/', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', 'nova_libvirt_qemu:/etc/libvirt/qemu', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-ssh', 'value': {'container_name': 'nova_ssh', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-ssh:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-ssh/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla', 'nova_compute:/var/lib/nova', '', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-novncproxy', 'value': {'container_name': 'nova_novncproxy', 'group': 'nova-novncproxy', 'image': 'kolla/ubuntu-source-nova-novncproxy:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-novncproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-spicehtml5proxy', 'value': {'container_name': 'nova_spicehtml5proxy', 'group': 'nova-spicehtml5proxy', 'image': 'kolla/ubuntu-source-nova-spicehtml5proxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-spicehtml5proxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-serialproxy', 'value': {'container_name': 'nova_serialproxy', 'group': 'nova-serialproxy', 'image': 'kolla/ubuntu-source-nova-serialproxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-serialproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-conductor', 'value': {'container_name': 'nova_conductor', 'group': 'nova-conductor', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-conductor:ussuri', 'volumes': ['/etc/kolla/nova-conductor/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-compute', 'value': {'container_name': 'nova_compute', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-compute:ussuri', 'environment': {'LIBGUESTFS_BACKEND': 'direct'}, 'privileged': True, 'enabled': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/nova-compute/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run:/run:shared', '/dev:/dev', 'kolla_logs:/var/log/kolla/', 'iscsi_info:/etc/iscsi', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-compute-ironic', 'value': {'container_name': 'nova_compute_ironic', 'group': 'nova-compute-ironic', 'image': 'kolla/ubuntu-source-nova-compute-ironic:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-compute-ironic/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 

TASK [nova-cell : include_tasks] ***********************************************
included: /usr/local/share/kolla-ansible/ansible/roles/nova-cell/tasks/check-containers.yml for server2

TASK [nova-cell : Check nova-cell containers] **********************************
changed: [server2] => (item={'key': 'nova-libvirt', 'value': {'container_name': 'nova_libvirt', 'group': 'compute', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-libvirt:ussuri', 'pid_mode': 'host', 'privileged': True, 'volumes': ['/etc/kolla/nova-libvirt/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run/:/run/:shared', '/dev:/dev', '/sys/fs/cgroup:/sys/fs/cgroup', 'kolla_logs:/var/log/kolla/', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', 'nova_libvirt_qemu:/etc/libvirt/qemu', ''], 'dimensions': {}}})
changed: [server2] => (item={'key': 'nova-ssh', 'value': {'container_name': 'nova_ssh', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-ssh:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-ssh/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla', 'nova_compute:/var/lib/nova', '', ''], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'nova-novncproxy', 'value': {'container_name': 'nova_novncproxy', 'group': 'nova-novncproxy', 'image': 'kolla/ubuntu-source-nova-novncproxy:ussuri', 'enabled': True, 'volumes': ['/etc/kolla/nova-novncproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-spicehtml5proxy', 'value': {'container_name': 'nova_spicehtml5proxy', 'group': 'nova-spicehtml5proxy', 'image': 'kolla/ubuntu-source-nova-spicehtml5proxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-spicehtml5proxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-serialproxy', 'value': {'container_name': 'nova_serialproxy', 'group': 'nova-serialproxy', 'image': 'kolla/ubuntu-source-nova-serialproxy:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-serialproxy/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
skipping: [server2] => (item={'key': 'nova-conductor', 'value': {'container_name': 'nova_conductor', 'group': 'nova-conductor', 'enabled': True, 'image': 'kolla/ubuntu-source-nova-conductor:ussuri', 'volumes': ['/etc/kolla/nova-conductor/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 
changed: [server2] => (item={'key': 'nova-compute', 'value': {'container_name': 'nova_compute', 'group': 'compute', 'image': 'kolla/ubuntu-source-nova-compute:ussuri', 'environment': {'LIBGUESTFS_BACKEND': 'direct'}, 'privileged': True, 'enabled': True, 'ipc_mode': 'host', 'volumes': ['/etc/kolla/nova-compute/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', '/lib/modules:/lib/modules:ro', '/run:/run:shared', '/dev:/dev', 'kolla_logs:/var/log/kolla/', 'iscsi_info:/etc/iscsi', 'libvirtd:/var/lib/libvirt', 'nova_compute:/var/lib/nova/', '', ''], 'dimensions': {}}})
skipping: [server2] => (item={'key': 'nova-compute-ironic', 'value': {'container_name': 'nova_compute_ironic', 'group': 'nova-compute-ironic', 'image': 'kolla/ubuntu-source-nova-compute-ironic:ussuri', 'enabled': False, 'volumes': ['/etc/kolla/nova-compute-ironic/:/var/lib/kolla/config_files/:ro', '/etc/localtime:/etc/localtime:ro', '/etc/timezone:/etc/timezone:ro', 'kolla_logs:/var/log/kolla/', ''], 'dimensions': {}}}) 

TASK [nova-cell : include_tasks] ***********************************************
skipping: [server2]

RUNNING HANDLER [nova-cell : Restart nova-ssh container] ***********************
changed: [server2]

RUNNING HANDLER [nova-cell : Restart nova-libvirt container] *******************
changed: [server2]

RUNNING HANDLER [nova-cell : Restart nova-compute container] *******************
changed: [server2]

RUNNING HANDLER [nova-cell : Wait for nova-compute services to update service versions] ***
skipping: [server2]

TASK [nova-cell : include_tasks] ***********************************************
included: /usr/local/share/kolla-ansible/ansible/roles/nova-cell/tasks/discover_computes.yml for server2

TASK [nova-cell : Build a list of expected compute service hosts] **************
ok: [server2 -> server1]

TASK [nova-cell : Waiting for nova-compute services to register themselves] ****
FAILED - RETRYING: Waiting for nova-compute services to register themselves (20 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (19 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (18 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (17 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (16 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (15 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (14 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (13 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (12 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (11 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (10 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (9 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (8 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (7 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (6 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (5 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (4 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (3 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (2 retries left).
FAILED - RETRYING: Waiting for nova-compute services to register themselves (1 retries left).
fatal: [server2 -> server1]: FAILED! => {"attempts": 20, "changed": false, "cmd": ["docker", "exec", "kolla_toolbox", "openstack", "--os-interface", "internal", "--os-auth-url", "http://192.168.1.250:35357", "--os-identity-api-version", "3", "--os-project-domain-name", "default", "--os-tenant-name", "admin", "--os-username", "admin", "--os-password", "openstack204", "--os-user-domain-name", "default", "--os-region-name", "RegionOne", "compute", "service", "list", "--format", "json", "--column", "Host", "--service", "nova-compute"], "delta": "0:00:00.059498", "end": "2020-08-17 14:22:56.357842", "msg": "non-zero return code", "rc": 1, "start": "2020-08-17 14:22:56.298344", "stderr": "Error: No such container: kolla_toolbox", "stderr_lines": ["Error: No such container: kolla_toolbox"], "stdout": "", "stdout_lines": []}

PLAY [Refresh nova scheduler cell cache] ***************************************

PLAY [Reload global Nova super conductor services] *****************************

PLAY [Reload Nova cell services] ***********************************************

PLAY [Reload global Nova API services] *****************************************

PLAY [Run Nova API online data migrations] *************************************

PLAY [Run Nova cell online data migrations] ************************************

PLAY [Apply role openvswitch] **************************************************
[WARNING]: Could not match supplied host pattern, ignoring:
enable_openvswitch_True_enable_ovs_dpdk_True

PLAY [Apply role ovs-dpdk] *****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_ovn_True

PLAY [Apply role ovn] **********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: hyperv
[WARNING]: Could not match supplied host pattern, ignoring: enable_hyperv_True

PLAY [Apply role nova-hyperv] **************************************************
skipping: no hosts matched

PLAY [Apply role neutron] ******************************************************
[WARNING]: Could not match supplied host pattern, ignoring: enable_kuryr_True

PLAY [Apply role kuryr] ********************************************************
skipping: no hosts matched

PLAY [Apply role heat] *********************************************************

PLAY [Apply role horizon] ******************************************************
[WARNING]: Could not match supplied host pattern, ignoring: enable_murano_True

PLAY [Apply role murano] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_solum_True

PLAY [Apply role solum] ********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_magnum_True

PLAY [Apply role magnum] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_mistral_True

PLAY [Apply role mistral] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_qinling_True

PLAY [Apply role qinling] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_sahara_True

PLAY [Apply role sahara] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: mongodb
[WARNING]: Could not match supplied host pattern, ignoring: enable_mongodb_True

PLAY [Apply role mongodb] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_panko_True

PLAY [Apply role panko] ********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_manila_True

PLAY [Apply role manila] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_gnocchi_True

PLAY [Apply role gnocchi] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_ceilometer_True

PLAY [Apply role ceilometer] ***************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_monasca_True

PLAY [Apply role monasca] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_aodh_True

PLAY [Apply role aodh] *********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_barbican_True

PLAY [Apply role barbican] *****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: congress-api
[WARNING]: Could not match supplied host pattern, ignoring: congress-policy-
engine
[WARNING]: Could not match supplied host pattern, ignoring: congress-datasource
[WARNING]: Could not match supplied host pattern, ignoring:
enable_congress_True

PLAY [Apply role congress] *****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_cyborg_True

PLAY [Apply role cyborg] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_tempest_True

PLAY [Apply role tempest] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_designate_True

PLAY [Apply role designate] ****************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_rally_True

PLAY [Apply role rally] ********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_vmtp_True

PLAY [Apply role vmtp] *********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_trove_True

PLAY [Apply role trove] ********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_watcher_True

PLAY [Apply role watcher] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_grafana_True

PLAY [Apply role grafana] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_cloudkitty_True

PLAY [Apply role cloudkitty] ***************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_freezer_True

PLAY [Apply role freezer] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_senlin_True

PLAY [Apply role senlin] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_searchlight_True

PLAY [Apply role searchlight] **************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_tacker_True

PLAY [Apply role tacker] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_octavia_True

PLAY [Apply role octavia] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_zun_True

PLAY [Apply role zun] **********************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_skydive_True

PLAY [Apply role skydive] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_vitrage_True

PLAY [Apply role vitrage] ******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: enable_blazar_True

PLAY [Apply role blazar] *******************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring:
enable_masakari_True

PLAY [Apply role masakari] *****************************************************
skipping: no hosts matched

PLAY RECAP *********************************************************************
server1                    : ok=30   changed=12   unreachable=0    failed=1    skipped=7    rescued=0    ignored=0   
server2                    : ok=67   changed=35   unreachable=0    failed=1    skipped=27   rescued=0    ignored=0   
server3                    : ok=62   changed=33   unreachable=0    failed=0    skipped=25   rescued=0    ignored=0   

Command failed ansible-playbook -i ../multinode -e @/etc/kolla/globals.yml -e @/etc/kolla/passwords.yml -e CONFIG_DIR=/etc/kolla  -e kolla_action=deploy /usr/local/share/kolla-ansible/ansible/site.yml 
